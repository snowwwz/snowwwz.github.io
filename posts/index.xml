<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Wouldn&#39;t It Be Nice</title>
		<link>https://yukinooz.github.io/posts/</link>
		<description>Recent content in Posts on Wouldn&#39;t It Be Nice</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>Copyright since 2020 Reona Shimada All Rights Reserved.</copyright>
		<lastBuildDate>Wed, 27 Oct 2021 08:42:47 +0900</lastBuildDate>
		<atom:link href="https://yukinooz.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>転職活動まとめ</title>
			<link>https://yukinooz.github.io/posts/2021/20211027_job_change/</link>
			<pubDate>Wed, 27 Oct 2021 08:42:47 +0900</pubDate>
			
			<guid>https://yukinooz.github.io/posts/2021/20211027_job_change/</guid>
			<description>転職理由 エンジニアとして働き始めて3年目、いい意味でも悪い意味でも現職は居心地のいい場所になっており、環境を変えて、新しい言語、技術などにチ</description>
			<content type="html"><![CDATA[<h1 id="転職理由">転職理由</h1>
<p>エンジニアとして働き始めて3年目、いい意味でも悪い意味でも現職は居心地のいい場所になっており、環境を変えて、新しい言語、技術などにチャレンジしたかったので。</p>
<h1 id="エージェント">エージェント</h1>
<p>レバテックキャリアのみ。
企業紹介から面接スケジュール調整、面接対策等大変お世話になった。
担当エージェントとのコミュニケーションツールがLINEで楽だったし、相手には仕事でも応援してくれる人がいるのは嬉しい。</p>
<h1 id="使ったサービスツール">使ったサービス/ツール</h1>
<ul>
<li>企業調査は、公式HPの社員紹介、テックブログ、qiita、Wantedly、open workとか</li>
<li>履歴書作成 <a href="https://rirekisho.yagish.jp/">yagish ブラウザでつくれる履歴書</a></li>
<li>結局使ってないけど、求人はLinkedinでも見てた。</li>
<li>聞かれそうな質問とその回答はgoogle splead sheetにまとめた。</li>
</ul>
<h1 id="会社選びの軸">会社選びの軸</h1>
<ul>
<li>エンジニアファースト
<ul>
<li>会社の制度としてエンジニアが働きやすい環境。</li>
</ul>
</li>
<li>エンジニア組織
<ul>
<li>小さいところにいたので、大きめの組織希望。特定の領域に強みを持ったエンジニアがいたり、会社として外部への発信をしているとこ。</li>
</ul>
</li>
<li>会社の事業/サービス
<ul>
<li>自社。どんな分野であれ「いいもの」のものづくりに携わりたい。</li>
</ul>
</li>
</ul>
<h1 id="聞かれた質問">聞かれた質問</h1>
<ul>
<li>自己紹介</li>
<li>志望動機</li>
<li>キャリアプラン</li>
<li>技術スキルを高めるために取り組んでいること</li>
<li>設計、開発をするときに大切にしている思想</li>
<li>努力や工夫をした経験</li>
<li>成功/失敗談</li>
<li>強み/得意分野</li>
<li>困難だった経験</li>
<li>経験言語</li>
<li>自社サービスのシステム構成</li>
<li>チーム/他の部署とのコミュニケーション方法</li>
<li>処理速度上げるときどうする</li>
<li>周りからどんな評価受けているか</li>
</ul>
<p>etc</p>
<h1 id="結果">結果</h1>
<p>9/3にエージェントとの面談して10/13の最終面接で第一希望の企業から内定いただいたので期間は１ヶ月半弱。
書類/面接選考に加え、技術試験は3社、SPI2社、CAB/適正試験は2社から求められた。</p>
<ul>
<li>検討企業約70社（紹介68社+LinkedInで3~5社程度）</li>
<li>応募数10社</li>
<li>内定1社</li>
<li>最終面接辞退1社</li>
<li>2次面接辞退1社</li>
<li>1次面接辞退1社</li>
<li>1次面接落ち2社</li>
<li>書類選考落ち3社</li>
<li>技術試験落ち1社</li>
</ul>
<h1 id="コロナ禍での転職活動">コロナ禍での転職活動</h1>
<p>エージェント面談から、選考企業の面接も全部オンラインで完結したので、現職も基本休みとらずに進められだいぶやりやすかった。</p>
]]></content>
		</item>
		
		<item>
			<title>ロンドン大学のCS オンライン学士に入学をした</title>
			<link>https://yukinooz.github.io/posts/2021/20211016_uol_enroll/</link>
			<pubDate>Sat, 16 Oct 2021 10:16:47 +0900</pubDate>
			
			<guid>https://yukinooz.github.io/posts/2021/20211016_uol_enroll/</guid>
			<description>概要 Coursera上の学士プログラム、ロンドン大学BSc CSに2021年10月より入学した。 会社は辞めないので、パートタイムで単位取得して</description>
			<content type="html"><![CDATA[<h1 id="概要">概要</h1>
<p>Coursera上の学士プログラム、ロンドン大学BSc CSに2021年10月より入学した。
会社は辞めないので、パートタイムで単位取得していく社会人学生になった。</p>
<h1 id="背景">背景</h1>
<p>コンピューターサイエンスを学問として体系的に学びたかったのが理由。</p>
<p>文系出身でエンジニアやってきて、自分の数学や情報学の学問的な素養が根本から欠如していることを痛感することは少なからずあったこと、全くの未知な分野にキャッチアップする際も、やはり学問的バックグラウンドを持っている人と比べると理解のスピードが違ったり、いつかちゃんと学びたいなとはずっと思っていた。</p>
<p>3年目になりタイミング的にも、今腰を据えて自分の職業を学問として向き合ってみることにした。</p>
<h1 id="参考リンク">参考リンク</h1>
<ul>
<li><a href="https://london.ac.uk/courses/computer-science">公式</a></li>
<li><a href="https://www.reddit.com/r/UniversityOfLondonCS/">reddit</a></li>
<li><a href="https://discord.com/channels/609355808010010654/609355808010010657">discord</a></li>
<li><a href="coursera.org/degrees/bachelor-of-science-computer-science-london">coursera University of London</a></li>
<li><a href="https://github.com/world-class/REPL">github REPL</a></li>
</ul>
<h1 id="今後">今後</h1>
<p>高校卒業から5年経過し数学の成績が証明できず、最初の学期は2科目固定で成績上位になる必要があるみたいなので、まずは正式入学できるよう今後5ヶ月頑張る。</p>
]]></content>
		</item>
		
		<item>
			<title>Learning How to Learn</title>
			<link>https://yukinooz.github.io/posts/2021/20210910_learn_how_to_learn/</link>
			<pubDate>Fri, 10 Sep 2021 10:20:00 +0900</pubDate>
			
			<guid>https://yukinooz.github.io/posts/2021/20210910_learn_how_to_learn/</guid>
			<description>Learning How to Learn: Powerful mental tools to help you master tough subjects tips Keep a planner journal quitting timeも書いておく Commit yourself to certain routines and tasks each day Delay rewards until you finish the task Watch out for procrastination cues Gain trust in your new system Have backup plans for when you still procrastinate Eat your frogs first todoist Eat</description>
			<content type="html"><![CDATA[<p><a href="https://www.coursera.org/learn/learning-how-to-learn">Learning How to Learn: Powerful mental tools to help you master tough subjects</a></p>
<h2 id="tips">tips</h2>
<ul>
<li>Keep a planner journal
<ul>
<li>quitting timeも書いておく</li>
</ul>
</li>
<li>Commit yourself to certain routines and tasks each day</li>
<li>Delay rewards until you finish the task</li>
<li>Watch out for procrastination cues</li>
<li>Gain trust in your new system</li>
<li>Have backup plans for when you still procrastinate</li>
<li>Eat your frogs first</li>
</ul>
<p><a href="https://todoist.com/productivity-methods/eat-the-frog">todoist Eat The Frog</a>
<a href="https://todoist.com/ja/productivity-methods/pomodoro-technique">todoist Pomodoro Technique</a></p>
<h2 id="product--process">Product &lt; Process</h2>
<p>&ldquo;タスク/プロダクト&quot;そのものではなく、その&quot;プロセス&quot;に着目すべき
習慣により関係するプロセスに着目することで、やりたくないタスクも終えることができる</p>
<blockquote>
<p>process means the flow of time and the habits and actions associated with that flow of time as in Im going to spend twenty minutes working</p>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>goroutine</title>
			<link>https://yukinooz.github.io/posts/2021/20210603_goroutine/</link>
			<pubDate>Thu, 03 Jun 2021 11:25:47 +0900</pubDate>
			
			<guid>https://yukinooz.github.io/posts/2021/20210603_goroutine/</guid>
			<description>Goroutine A goroutine is a lightweight thread managed by the Go runtime. A tour of go: goroutinne 引数の評価は既存のgoroutineで行い、実行だけ別のgoroutineを使用して行う。 go f(x, y, z) Channel Channels are a</description>
			<content type="html"><![CDATA[<h1 id="goroutine">Goroutine</h1>
<blockquote>
<p>A goroutine is a lightweight thread managed by the Go runtime.</p>
</blockquote>
<ul>
<li><a href="https://tour.golang.org/concurrency/1">A tour of go: goroutinne</a></li>
<li>引数の評価は既存のgoroutineで行い、実行だけ別のgoroutineを使用して行う。</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="k">go</span> <span class="nf">f</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">)</span>
</code></pre></div><h1 id="channel">Channel</h1>
<blockquote>
<p>Channels are a typed conduit through which you can send and receive values with the channel operator, &lt;-.</p>
</blockquote>
<ul>
<li><a href="https://tour.golang.org/concurrency/2">A tour of go: channel</a></li>
<li>goの並列はMessage Passing方式。
<ul>
<li>⇆ Shared Memory：複数プロセスがロックを取りながら共通メモリを利用する</li>
</ul>
</li>
<li>並行実行されるgoroutine間を接続するパイプの役割で、データを共有する</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">//　チャネル作成 make(chan [型])
</span><span class="c1"></span><span class="nx">ch</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Send v to channel ch.
</span><span class="c1"></span><span class="nx">ch</span> <span class="o">&lt;-</span> <span class="nx">v</span>  
<span class="c1">// Receive from ch, and assign value to v.
</span><span class="c1"></span><span class="nx">v</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">ch</span>  
<span class="c1">// 					
</span><span class="c1"></span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">c</span><span class="p">,</span> <span class="o">&lt;-</span><span class="nx">c</span>
</code></pre></div><h2 id="並列数を制限する">並列数を制限する</h2>
<ul>
<li>最大同時並列実行数をバッファサイズとしたチャネルを作成することで実現</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// 最大5並列の場合
</span><span class="c1"></span><span class="nx">limit</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{},</span> <span class="mi">5</span><span class="p">)</span>
<span class="nx">result</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">downloadChan</span><span class="p">)</span>
<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">w</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">words</span> <span class="p">{</span>
	<span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// limitチャネルに空のstruct挿入
</span><span class="c1"></span>            <span class="nx">limit</span> <span class="o">&lt;-</span> <span class="kd">struct</span><span class="p">{}{}</span>
            <span class="c1">// do something
</span><span class="c1"></span>            <span class="c1">// チャネル解放
</span><span class="c1"></span>            <span class="o">&lt;-</span><span class="nx">limit</span>
	<span class="p">}(</span><span class="nx">w</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>golang エスケープ解析を調べてみる</title>
			<link>https://yukinooz.github.io/posts/2021/20210602_go_escape_analysis/</link>
			<pubDate>Wed, 02 Jun 2021 11:25:47 +0900</pubDate>
			
			<guid>https://yukinooz.github.io/posts/2021/20210602_go_escape_analysis/</guid>
			<description>エスケープ解析 Escape Analysis Goコンパイラはエスケープ解析の際に基本的にスタック領域を割り当てし、 必要な時のみヒープ割り当てを行う。 関数内でのみ使うな</description>
			<content type="html"><![CDATA[<h2 id="エスケープ解析escape-analysis">エスケープ解析　Escape Analysis</h2>
<ul>
<li>Goコンパイラはエスケープ解析の際に基本的にスタック領域を割り当てし、 必要な時のみヒープ割り当てを行う。</li>
<li>関数内でのみ使うならスタック、他の関数で使う可能性あればヒープ。</li>
<li>スタックはヒープと比較し、軽量かつ高速処理。</li>
</ul>
<p>ビルド時にオプションつけることで、エスケープ解析の際にどこでヒープ領域が使われたか確認できる</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="k">go</span> <span class="nx">build</span> <span class="o">-</span><span class="nx">gcflags</span> <span class="err">&#39;</span><span class="o">-</span><span class="nx">m</span><span class="err">&#39;</span>

<span class="c1">// 詳細
</span><span class="c1"></span><span class="k">go</span> <span class="nx">build</span> <span class="o">-</span><span class="nx">gcflags</span> <span class="err">&#39;</span><span class="o">-</span><span class="nx">m</span> <span class="o">-</span><span class="nx">m</span><span class="err">&#39;</span>
</code></pre></div><p>can inline = インライン展開の条件を満たしている
inlining call to = インライン展開
does not escape = スタック領域
does escape = ヒープ領域</p>
<h2 id="例">例</h2>
<ul>
<li>スタックには上限があるため、メモリを多く必要とする場合はヒープ領域にエスケープされる</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">child</span><span class="p">(</span><span class="nx">data</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
   <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
     <span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprintln</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stderr</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
   <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">BenchmarkTooLarge</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="nx">data</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">10000</span><span class="p">)</span>
        <span class="nf">child</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><pre><code>$ go test escape_analysis_test.go -bench . -gcflags=-m -benchmem
# command-line-arguments [command-line-arguments.test]
./escape_analysis_test.go:10:6: can inline child
./escape_analysis_test.go:19:17: inlining call to child
./escape_analysis_test.go:10:15: data does not escape
./escape_analysis_test.go:12:18: ... argument does not escape
./escape_analysis_test.go:12:33: len(data) escapes to heap　// fmt外部関数への引数はヒープへ
./escape_analysis_test.go:16:24: b does not escape
./escape_analysis_test.go:18:21: make([]int, 10000) escapes to heap　// 長さ10000のスライス割り当てはヒープへ
./escape_analysis_test.go:19:17: ... argument does not escape
./escape_analysis_test.go:19:17: len(data) escapes to heap

BenchmarkTooLarge-8   	  150694	      7932 ns/op	   81920 B/op	       1 allocs/op
</code></pre><ul>
<li>インライン展開された関数内で確保したメモリはエスケープしない
<ul>
<li>allocate()でmake()でメモリ確保してreturnしているが、can inline allocate インライン展開されているためスタック領域が割り当てられる</li>
</ul>
</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">child</span><span class="p">(</span><span class="nx">data</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
   <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
     <span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprintln</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stderr</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
   <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">allocate</span><span class="p">()</span> <span class="p">[]</span><span class="kt">int</span> <span class="p">{</span> 
    <span class="k">return</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> 
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">BenchmarkAllocateInFunction</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="nx">data</span> <span class="o">:=</span> <span class="nf">allocate</span><span class="p">()</span>
        <span class="nf">child</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><pre><code>$ go test escape_analysis_test.go -bench . -gcflags=-m -benchmem
# command-line-arguments [command-line-arguments.test]
./escape_analysis_test.go:10:6: can inline child
./escape_analysis_test.go:16:6: can inline allocate // BenchmarkAllocateInFunction内でインライン展開される
./escape_analysis_test.go:39:25: inlining call to allocate
./escape_analysis_test.go:40:17: inlining call to child
./escape_analysis_test.go:10:15: data does not escape
./escape_analysis_test.go:12:18: ... argument does not escape
./escape_analysis_test.go:12:33: len(data) escapes to heap
./escape_analysis_test.go:16:36: make([]int, 1) escapes to heap 
./escape_analysis_test.go:37:34: b does not escape
./escape_analysis_test.go:39:25: make([]int, 1) does not escape // スタックへ
./escape_analysis_test.go:40:17: ... argument does not escape
./escape_analysis_test.go:40:17: len(data) escapes to heap

BenchmarkAllocateInFunction-8   	1000000000	         0.502 ns/op	       0 B/op	       0 allocs/op
</code></pre><ul>
<li>new()でもスタック使われることはある</li>
</ul>
<pre><code>type candy struct {
	color string
	count int
}

func main() {
	_ = child()
}

func child() *candy {
	a := new(candy)
	a.color = &quot;red&quot;
	a.count = 3
	return &amp;candy{}
}
</code></pre><pre><code>$ go build -gcflags -m test.go
# command-line-arguments
./test.go:12:6: can inline child
./test.go:8:6: can inline main
./test.go:9:14: inlining call to child
./test.go:9:14: new(candy) does not escape 
./test.go:9:14: &amp;candy literal does not escape
./test.go:13:11: new(candy) does not escape　// new()でもスコープが関数内のみの場合はスタック
./test.go:16:10: &amp;candy literal escapes to heap // 関数の外で扱われる（と判断された）ためエスケープ
</code></pre>]]></content>
		</item>
		
		<item>
			<title>golang append()のメモリ割り当て</title>
			<link>https://yukinooz.github.io/posts/2021/20210527_go_memory/</link>
			<pubDate>Thu, 27 May 2021 22:15:47 +0900</pubDate>
			
			<guid>https://yukinooz.github.io/posts/2021/20210527_go_memory/</guid>
			<description>makeのcapacityは確保するメモリの効率化のためスライスのMAXの長さを指す。 capacityを超えた場合、要素数 × 2 の容量が確保さ</description>
			<content type="html"><![CDATA[<ul>
<li>makeのcapacityは確保するメモリの効率化のためスライスのMAXの長さを指す。</li>
<li>capacityを超えた場合、要素数 × 2 の容量が確保され無駄なメモリ領域が使われる。</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">slice</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;len=%v, cap=%v\n&#34;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">slice</span><span class="p">),</span> <span class="nb">cap</span><span class="p">(</span><span class="nx">slice</span><span class="p">))</span>

	<span class="nx">slice</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">slice</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;len=%v, cap=%v\n&#34;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">slice</span><span class="p">),</span> <span class="nb">cap</span><span class="p">(</span><span class="nx">slice</span><span class="p">))</span>
<span class="p">}</span>

<span class="c1">// len=10, cap=10
</span><span class="c1">// len=11, cap=20
</span></code></pre></div><ul>
<li>必要なメモリをあらかじめ確保した場合としなかった場合を比較してみた。</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="s">&#34;testing&#34;</span>

<span class="kd">const</span> <span class="nx">SIZE</span> <span class="p">=</span> <span class="mi">1000</span>

<span class="kd">func</span> <span class="nf">BenchmarkAllocated</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">s</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">SIZE</span><span class="p">)</span>
		<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">SIZE</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
			<span class="nx">s</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">BenchmarkNotAllocated</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">s</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{}</span>
		<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">SIZE</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
			<span class="nx">s</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div><ul>
<li><code>-benchmem</code>オプションでメモリ情報表示
<ul>
<li>読み方-&gt; <a href="https://pkg.go.dev/testing#BenchmarkResult">https://pkg.go.dev/testing#BenchmarkResult</a></li>
</ul>
</li>
</ul>
<blockquote>
<p>-benchmem
Print memory allocation statistics for benchmarks.</p>
</blockquote>
<pre><code>$ go test memory_test.go -bench . -benchmem
goos: darwin
goarch: amd64
cpu: Intel(R) Core(TM) i5-8279U CPU @ 2.40GHz
BenchmarkAllocated-8               99382             12088 ns/op           81920 B/op          1 allocs/op
BenchmarkNotAllocated-8            24846             47484 ns/op          386297 B/op         20 allocs/op
PASS
ok      command-line-arguments  3.245s
</code></pre><ul>
<li>cap指定せずに<code>append()</code>するのは非効率。</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>golang interfaceとは</title>
			<link>https://yukinooz.github.io/posts/2021/20210527_go_interface/</link>
			<pubDate>Thu, 27 May 2021 11:25:47 +0900</pubDate>
			
			<guid>https://yukinooz.github.io/posts/2021/20210527_go_interface/</guid>
			<description>Interface 中身のない型 何でも入る型 func main() { var i interface{} i = 4 fmt.Println(i) //4 i = 3.5 fmt.Println(i) //3.5 i = &amp;#34;文字列&amp;#34; fmt.Println(i) //文字列 } 型変換 // (interfaceの変数).</description>
			<content type="html"><![CDATA[<h1 id="interface">Interface</h1>
<ul>
<li>中身のない型</li>
</ul>
<h2 id="何でも入る型">何でも入る型</h2>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">i</span> <span class="kd">interface</span><span class="p">{}</span>
	
	<span class="nx">i</span> <span class="p">=</span> <span class="mi">4</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="c1">//4
</span><span class="c1"></span>	
	<span class="nx">i</span> <span class="p">=</span> <span class="mf">3.5</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="c1">//3.5
</span><span class="c1"></span>	
	<span class="nx">i</span> <span class="p">=</span> <span class="s">&#34;文字列&#34;</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="c1">//文字列
</span><span class="c1"></span><span class="p">}</span>
</code></pre></div><ul>
<li>型変換</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// (interfaceの変数).(型名)
</span><span class="c1"></span>
<span class="nx">str</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">i</span><span class="p">.(</span><span class="kt">string</span><span class="p">)</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;\n%s %T&#34;</span><span class="p">,</span> <span class="nx">str</span><span class="p">,</span> <span class="nx">str</span><span class="p">)</span> <span class="c1">// 文字列 string true
</span></code></pre></div><ul>
<li>switchで型判定できる</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">i</span> <span class="kd">interface</span><span class="p">{}</span>
	
	<span class="nx">i</span> <span class="p">=</span> <span class="mi">4</span>
	<span class="nf">printType</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
	
	<span class="nx">i</span> <span class="p">=</span> <span class="mf">3.5</span>
	<span class="nf">printType</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
	
	<span class="nx">i</span> <span class="p">=</span> <span class="s">&#34;文字列&#34;</span>
	<span class="nf">printType</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
	
	<span class="nx">i</span> <span class="p">=</span> <span class="kc">false</span>
	<span class="nf">printType</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
<span class="p">}</span>


<span class="kd">func</span> <span class="nf">printType</span><span class="p">(</span><span class="nx">i</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
	<span class="k">switch</span> <span class="nx">i</span><span class="p">.(</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">case</span> <span class="kt">int</span><span class="p">:</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;int&#34;</span><span class="p">)</span>
	<span class="k">case</span> <span class="kt">float64</span><span class="p">:</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;float64&#34;</span><span class="p">)</span>
	<span class="k">case</span> <span class="kt">string</span><span class="p">:</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;string&#34;</span><span class="p">)</span>
	<span class="k">default</span><span class="p">:</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;other&#34;</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h2 id="関数をまとめる">関数をまとめる</h2>
<ul>
<li>関数群をメソッドにもつ構造体を代入できる、クラスの役割</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">Interface</span> <span class="kd">interface</span> <span class="p">{</span>
	<span class="nf">add</span><span class="p">(</span><span class="nx">x</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">i</span> <span class="nx">Interface</span>
	<span class="nx">i</span> <span class="p">=</span> <span class="nx">struct1</span><span class="p">{</span><span class="nx">value</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
	<span class="nx">i</span> <span class="p">=</span> <span class="nx">struct2</span><span class="p">{</span><span class="nx">value</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">struct1</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">value</span> <span class="kt">int</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">struct2</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">value</span> <span class="kt">int</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">s1</span> <span class="nx">struct1</span><span class="p">)</span> <span class="nf">add</span><span class="p">(</span><span class="nx">x</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nx">s1</span><span class="p">.</span><span class="nx">value</span> <span class="o">+</span> <span class="nx">x</span>
<span class="p">}</span>
</code></pre></div><ul>
<li>addメソッドはstruct1にしか実装していないため、Interface型のiにStruct2は代入できない</li>
</ul>
<blockquote>
<p>cannot use struct2{&hellip;} (type struct2) as type Interface in assignment:
struct2 does not implement Interface (missing add method)</p>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>golang deferの挙動</title>
			<link>https://yukinooz.github.io/posts/2020/20201120_go_defer/</link>
			<pubDate>Fri, 20 Nov 2020 13:15:47 +0900</pubDate>
			
			<guid>https://yukinooz.github.io/posts/2020/20201120_go_defer/</guid>
			<description>defer A defer statement defers the execution of a function until the surrounding function returns. The deferred call&amp;rsquo;s arguments are evaluated immediately, but the function call is not executed until the surrounding function returns. A tour of go: defer 関数が終了する際に実行すべき処理を記述できる 遅延実行される関数</description>
			<content type="html"><![CDATA[<h1 id="defer">defer</h1>
<blockquote>
<p>A defer statement defers the execution of a function until the surrounding function returns.
The deferred call&rsquo;s arguments are evaluated immediately, but the function call is not executed until the surrounding function returns.</p>
</blockquote>
<ul>
<li><a href="https://tour.golang.org/flowcontrol/12">A tour of go: defer</a></li>
<li>関数が終了する際に実行すべき処理を記述できる</li>
<li>遅延実行される関数の引数は即時評価され、実行のみ遅延される</li>
</ul>
<h3 id="用途">用途</h3>
<ul>
<li>後片付けに使われる</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;io&#34;</span>
	<span class="s">&#34;os&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="c1">// deferを使わないと途中でエラー終了した際にファイルがクローズされない
</span><span class="c1"></span>	<span class="nx">err</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
		<span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;aaa.txt&#34;</span><span class="p">)</span>
		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
			<span class="k">return</span> <span class="nx">err</span>
		<span class="p">}</span>

		<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">io</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">file</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
			<span class="k">return</span> <span class="nx">err</span>
		<span class="p">}</span>

		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">file</span><span class="p">.</span><span class="nf">Close</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
			<span class="k">return</span> <span class="nx">err</span>
		<span class="p">}</span>
		<span class="k">return</span> <span class="kc">nil</span>
	<span class="p">}()</span>

	<span class="c1">// defer使えばエラーが起きてもクローズされる
</span><span class="c1"></span>	<span class="nx">err</span> <span class="p">=</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
		<span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;aaa.txt&#34;</span><span class="p">)</span>
		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
			<span class="k">return</span> <span class="nx">err</span>
		<span class="p">}</span>
		<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
			<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">file</span><span class="p">.</span><span class="nf">Close</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
			   <span class="c1">// do something
</span><span class="c1"></span>			<span class="p">}</span>
		<span class="p">}()</span>

		<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">io</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">file</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
			<span class="k">return</span> <span class="nx">err</span>
		<span class="p">}</span>

		<span class="k">return</span> <span class="kc">nil</span>
	<span class="p">}()</span>

	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><h3 id="特徴">特徴</h3>
<ul>
<li>LIFO：後入先出法で実行される</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">defer</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;G&#34;</span><span class="p">)</span> <span class="c1">// 8
</span><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;B&#34;</span><span class="p">)</span> <span class="c1">// 1
</span><span class="c1"></span>
	<span class="nx">_</span><span class="p">,</span> <span class="nx">_</span> <span class="p">=</span> <span class="kd">func</span><span class="p">()</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;L&#34;</span><span class="p">)</span> <span class="c1">// 2
</span><span class="c1"></span>		<span class="k">defer</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;I&#34;</span><span class="p">)</span> <span class="c1">// 6
</span><span class="c1"></span>		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;O&#34;</span><span class="p">)</span> <span class="c1">// 3
</span><span class="c1"></span>		<span class="k">defer</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;G&#34;</span><span class="p">)</span> <span class="c1">// 5
</span><span class="c1"></span>
		<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;G&#34;</span><span class="p">)</span><span class="c1">// 4
</span><span class="c1"></span>	<span class="p">}()</span>

	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;N&#34;</span><span class="p">)</span> <span class="c1">// 7
</span><span class="c1"></span><span class="p">}</span>


<span class="c1">// =&gt; BLOGGING
</span></code></pre></div><ul>
<li>returnの値を変えるには名前付き戻り値を使う
<ul>
<li><a href="https://tour.golang.org/basics/7">a tour of go: Named return values</a></li>
</ul>
</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;fmt&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="c1">// 関数内で返り値の変数を定義/初期化
</span><span class="c1"></span>	<span class="nx">x</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
		<span class="nx">a</span> <span class="o">:=</span> <span class="mi">0</span>
		<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
			<span class="nx">a</span> <span class="p">=</span> <span class="mi">1</span>
		<span class="p">}()</span>

		<span class="k">return</span> <span class="nx">a</span>
	<span class="p">}()</span>

	<span class="c1">// 名前付き戻り値を指定
</span><span class="c1"></span>	<span class="nx">y</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">()</span> <span class="p">(</span><span class="nx">a</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
			<span class="nx">a</span> <span class="p">=</span> <span class="mi">1</span>
		<span class="p">}()</span>

		<span class="k">return</span> <span class="nx">a</span>
	<span class="p">}()</span>

	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;x= %d\ny= %d&#34;</span><span class="p">,</span> <span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// =&gt; x= 0
</span><span class="c1">//    y= 1
</span></code></pre></div><ul>
<li>遅延実行される関数の引数は即時評価され、実行のみ遅延される</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">x</span> <span class="o">:=</span> <span class="s">&#34;xxxxx&#34;</span>
		<span class="nx">x</span> <span class="p">=</span> <span class="s">&#34;yyyyy&#34;</span>
		<span class="k">defer</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
	<span class="p">}()</span>

	<span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">x</span> <span class="o">:=</span> <span class="s">&#34;xxxxx&#34;</span>
		<span class="k">defer</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
		<span class="nx">x</span> <span class="p">=</span> <span class="s">&#34;yyyyy&#34;</span>
	<span class="p">}()</span>
<span class="p">}</span>

<span class="c1">// =&gt; yyyyy
</span><span class="c1">//    XXXXX
</span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Jenkins導入とNginxでリバースプロキシ設定</title>
			<link>https://yukinooz.github.io/posts/2019/20191108_jenkins_nginx/</link>
			<pubDate>Fri, 08 Nov 2019 10:20:00 +0900</pubDate>
			
			<guid>https://yukinooz.github.io/posts/2019/20191108_jenkins_nginx/</guid>
			<description>業務でCIツールとしてJenkinsを入れることになったので、その時の記録。 jenkinsの説明は、Jenkinsとはなんぞや？​が簡潔でわ</description>
			<content type="html"><![CDATA[<p>業務でCIツールとしてJenkinsを入れることになったので、その時の記録。
jenkinsの説明は、<a href="https://qiita.com/ko8@github/items/e6e058976d48d3fc3424">Jenkinsとはなんぞや？</a>​が簡潔でわかりやすかった。</p>
<h2 id="バージョン">バージョン</h2>
<ul>
<li>nginx 1.16.1</li>
<li>centOS 7.6.1810</li>
<li>Jenkins 2.190.3</li>
</ul>
<h1 id="jenkins導入方法">Jenkins導入方法</h1>
<p><strong>(1) install Java</strong>
Jenkinsはjavaで実装されており、javaの実行環境が必要があるためない場合はインストールする。</p>
<pre><code># openJDK
yum install java-1.8.0-openjdk
</code></pre><p><strong>(2) install Jenkins</strong></p>
<p><a href="http://pkg.jenkins-ci.org/redhat-stable/">公式</a>の手順。</p>
<pre><code># jenkinsのyumリポジトリを取得
wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo

# 公開鍵追加
rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key

# インストール
yum install jenkins
</code></pre><p><strong>(3) 各種設定</strong>
設定ファイル： <code>/etc/sysconfig/jenkins</code>
各種設定はこのファイルで変更することができる。以下は、デフォルトの値。</p>
<pre><code># ポート
JENKINS_PORT=“8080&quot;
​
# 実行ユーザ
JENKINS_USER=&quot;jenkins&quot;
</code></pre><p>実行ユーザーの変更を行った場合以下のディレクトリ/ファイルの権限も同様に変更する必要がある。</p>
<ul>
<li><code>/var/lib/jenkins</code></li>
<li><code>/var/log/jenkins</code></li>
<li><code>/var/cache/jenkins</code></li>
</ul>
<p><strong>(4) 起動</strong></p>
<pre><code># 起動
systemctl start jenkins

# 再起動
systemctl restart jenkins

# 終了
systemctl stop jenkins

# 確認
systemctl status jenkins
</code></pre><p>起動して、statusがrunningになったら、<code>http://{IP}:{PORT}</code>で接続できる。外部からの接続が遮断されている場合は、解放することを忘れずに。</p>
<p><a href="https://wiki.jenkins.io/display/JENKINS/Installing+Jenkins+on+Red+Hat+distributions">firewall設定 counfigure firewall 参照</a></p>
<h1 id="nginxでリバースプロキシ設定">Nginxでリバースプロキシ設定</h1>
<p>リバースプロキシとは受け取ったリクエストを転送する機能で、ロードバランスや、リクエストの書き換え、アクセス制限などに使われてる。
​
今回、毎回ポート番号指定する代わりに、<code>http://{IP}/jenkins</code>で接続できるように以下の設定を行った。
​
<img src="/jenkins_nginx.png" alt="jenkins_nginx"></p>
<p><strong>(1) jenkins側の設定</strong></p>
<p>設定ファイル(<code>/etc/sysconfig/jenkin</code>）を以下のように書き換える。</p>
<pre><code>JENKINS_ARGS=&quot;--prefix=/jenkins&quot;
</code></pre><p><strong>(2) Nginx側の設定</strong></p>
<ul>
<li>共通設定：<code>/etc/nginx/nginx.conf</code></li>
<li>serverブロックごとの設定：<code>/etc/nginx/conf.d/</code></li>
<li>デフォルトのlistenポート80番の設定：<code>/etc/nginx/conf.d/default.conf</code>
​</li>
</ul>
<p><code>/etc/nginx/conf.d/default.conf</code>で80番ポートをlistenしているserverディレクティブ内に以下を追記。nginxを経由することで、リクエスト情報が変わるので、headerをここでセットしてあげる必要がある。</p>
<pre><code>location ~ /jenkins {
    proxy_redirect     off;
    proxy_set_header   Host $host;
    proxy_set_header   X-Forwarded-Proto $scheme;
    proxy_set_header   X-Real-IP         $remote_addr;
    proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_pass         http://jenkins;
}
</code></pre><ul>
<li>変数 （$がつくものはnginxの組み込み変数。）
<ul>
<li><code>$scheme</code>：リクエストされたスキーマ（http、https）</li>
<li><code>$http_host</code>：ポート番号付きホスト</li>
<li><code>$remote_addr</code>：アクセス元のIPアドレス</li>
<li><code>$proxy_add_x_forwarded_for</code>：ユーザーが経由したアドレス</li>
<li><code>$host</code>：マッチした、サーバ名/Hostヘッダの値。</li>
</ul>
</li>
<li>ディレクティブ
<ul>
<li><code>proxy_set_header ヘッダーフィールド名　値</code>：リクエストをプロキシする際に特定のヘッダ情報を付与する。</li>
<li><code>proxy_pass 転送先</code>：転送先URL。
​
nginxで使える変数や、ディレクティブの一覧は<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html">ここ</a>や<a href="http://www2.matsue-ct.ac.jp/home/kanayama/text/nginx/all.html">ここ</a>が参考になった。
​</li>
</ul>
</li>
</ul>
<p><code>/etc/nginx/conf.d/jenkins.conf</code>を作成し、以下を記載。<code>127.0.0.1</code> は、ループバック・アドレス（自分自身を指すIPアドレス）のこと。default.confの<code>proxy_pass         http://jenkins;</code>のjenkinsをここで定義。</p>
<pre><code>upstream jenkins {
　　server 127.0.0.1:8080 fail_timeout=0;
}
</code></pre><p><strong>(3) 再起動</strong></p>
<pre><code># jenkins再起動
systemctl restart jenkins

# nginx再起動
systemctl restart nginx
</code></pre><p><code>http://{IP}/jenkins</code>にアクセスして、jenkinsが無事に表示されたら完了。</p>
<p>jenkinsで<code>&quot;リバースプロキシの設定がおかしいようです&quot;</code>のエラーが出てたが、jenkinsの管理→システムの設定→JenkinsのURLを変更すると消えた。</p>
<h1 id="参考">参考</h1>
<ul>
<li>nginx実践入門</li>
<li><a href="https://christina04.hatenablog.com/entry/2016/10/25/190000">https://christina04.hatenablog.com/entry/2016/10/25/190000</a></li>
<li><a href="https://wiki.jenkins.io/display/JENKINS/Jenkins+behind+an+NGinX+reverse+proxy">https://wiki.jenkins.io/display/JENKINS/Jenkins+behind+an+NGinX+reverse+proxy</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>メモリの仕組みの理解はプログラマの嗜み</title>
			<link>https://yukinooz.github.io/posts/2019/20191028_oop_memory/</link>
			<pubDate>Mon, 28 Oct 2019 10:20:00 +0900</pubDate>
			
			<guid>https://yukinooz.github.io/posts/2019/20191028_oop_memory/</guid>
			<description>オブジェクト指向でなぜ作るのか 「オブジェクト指向でなぜ作るのか」の第５章「メモリの仕組みの理解はプログラマのたしなみ」を読んだので、メモ。 一</description>
			<content type="html"><![CDATA[<h2 id="オブジェクト指向でなぜ作るのか">オブジェクト指向でなぜ作るのか</h2>
<p>「オブジェクト指向でなぜ作るのか」の第５章「メモリの仕組みの理解はプログラマのたしなみ」を読んだので、メモ。</p>
<h2 id="一般的なメモリの使い方">一般的なメモリの使い方</h2>
<ul>
<li>プログラムのメモリは、静的領域、ヒープ領域、スタック領域の３つに分かれて管理</li>
</ul>
<p><strong>静的領域</strong></p>
<ul>
<li>プログラム開始時に確保され、以降プログラムが終了するまで配置が変わらない固定領域</li>
<li>格納されるのは、静的な変数、グローバル変数と、コード情報など</li>
</ul>
<p><strong>ヒープ領域</strong></p>
<ul>
<li>実行時に動的に確保されるメモリ領域</li>
<li>heapは英語で「たくさん」の「山ほど」の意味でプログラム開始時にたくさんのメモリ領域を確保するのが由来</li>
<li>実行中にアプリケーションが必要なサイズを要求することで割り当てられ、不要になったら元に戻す使われ方</li>
</ul>
<p><strong>スタック領域</strong></p>
<ul>
<li>サブルーチン（OOPではメソッド）呼び出し制御のため使われる</li>
<li>タスクを終了する、または関数から抜けると、スタックの内容も破棄される。</li>
</ul>
<table>
<thead>
<tr>
<th>種類</th>
<th>静的領域</th>
<th>ヒープ領域</th>
<th>スタック領域</th>
</tr>
</thead>
<tbody>
<tr>
<td>使い方</td>
<td>アプリケーション開始時</td>
<td>アプリケーション開始時に一定領域を確保。あとは都度。</td>
<td>LIFO</td>
</tr>
<tr>
<td>内容</td>
<td>グローバル変数、実行コード</td>
<td>任意（アプリケーションによる）</td>
<td>ローカル変数、引数、戻り値</td>
</tr>
<tr>
<td>確保される単位</td>
<td>アプリケーションでひとつ</td>
<td>システム、アプリケーションでひとつ</td>
<td>スレッドごと</td>
</tr>
</tbody>
</table>
<h2 id="oopでの使われ方">OOPでの使われ方</h2>
<ul>
<li>インスタンス生成時にヒープ領域が使われる=クラスのインスタンス変数を格納するのに必要なメモリが<strong>ヒープ領域</strong>に割り当てられる</li>
<li>インスタンスを格納する変数にはインスタンスそのものではなく、ヒープ領域に作られたインスタンスの位置を示すポインタが格納される</li>
<li>この時、メソッド呼び出しを実現するために、<strong>ヒープ領域にあるインスタンスから静的領域にあるクラス情報への対応づけも行われる</strong></li>
</ul>
<p><img src="/oop_memory1.png" alt="oop_memory"></p>
<h2 id="メソッドテーブル">メソッドテーブル</h2>
<ul>
<li>OOPの特徴であるポリモーフィズムでは、対象となるクラスのメソッドの呼び出し方を全て統一させる必要がある。メソッドが格納されている場所を表すポインタを集めたメソッドテーブルを利用。</li>
<li>メソッドテーブルは異なるクラスを同じ顔に見せるための仕組みで、実際にメソッドを呼び出す時には、このメソッドテーブルを経由して目的のメソッドを実行する。</li>
<li>メソッドに書かれたコードが違っても呼び出し方法を統一できる。</li>
</ul>
<p><img src="/oop_memory2.png" alt="oop_memory"></p>
<h2 id="継承">継承</h2>
<ul>
<li>スーパークラスで定義されたメソッドは、サブクラスでそのまま利用できるので、静的領域に格納されたコード情報を利用</li>
<li>継承されたメソッドのコード情報はサブクラスではメモリに展開せずスーパークラスの情報を使う
メソッドテーブルには、スーパークラスで定義されたメソッドも含めて定義される。</li>
</ul>
<p><img src="/oop_memory3.png" alt="oop_memory"></p>
<ul>
<li>スーパークラスで定義されたインスタンス変数はヒープ領域に作られるサブクラスの全てのインスタンスにコピーして保持される</li>
<li>全てのインスタンスに変数領域が確保されるのは、privateで宣言したインスタンス変数についても同様</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Team Geekを読んで</title>
			<link>https://yukinooz.github.io/posts/2019/20191008_teamgeek/</link>
			<pubDate>Tue, 08 Oct 2019 10:15:47 +0900</pubDate>
			
			<guid>https://yukinooz.github.io/posts/2019/20191008_teamgeek/</guid>
			<description>Team Geek はじめに プログラマという職業は常にチームで仕事をし、&amp;ldquo;チーム&amp;quot;は個人の幸福他、生産性に大きな影響を与えている。 ソフ</description>
			<content type="html"><![CDATA[<h1 id="team-geek">Team Geek</h1>
<h2 id="はじめに">はじめに</h2>
<p>プログラマという職業は常にチームで仕事をし、&ldquo;チーム&quot;は個人の幸福他、生産性に大きな影響を与えている。
ソフトウェア開発はチームスポーツであり、技術的要因と同じくらい人的要因が影響し、何十年かけて技術力を磨いても、人間的要因を学んでいない人がほとんど。プログラマとして成功するには、最新の技術トレンドを追ったり、コードをひたすら書いたりするだけでは足りず、チームコラボレーションを学ぶ必要がある。</p>
<h2 id="ポストモーテム">ポストモーテム</h2>
<ul>
<li><strong>ポストモーテム（Postmortem）とは</strong>「検死」の意味。想定外の事象発生時の振り返り、報告のことをさす。</li>
<li>過ちから学ぶには失敗を<strong>文書化</strong>すること。謝罪や言い訳ではなく、何を学んだか、次どうすればいいいかを記録に残す。</li>
<li>見つけやすい場所において、変更を継続できるようにする。失敗を適切に文書かしておけば他人も学習し、歴史を繰り返さずにすむかもしれない。</li>
<li>優れたポストモーテムは以下の要素を含む。
<ul>
<li>概要</li>
<li>イベントのタイムライン</li>
<li>イベントの根本的要因</li>
<li>影響とその損害の評価</li>
<li>すぐに問題を解決するための行動一式（一時対応、恒久対応）</li>
<li>再発を防止するための行動一式</li>
</ul>
</li>
</ul>
<h2 id="hrt">HRT</h2>
<ul>
<li>エンジニアリングチームで成功するための３つの原則</li>
</ul>
<pre><code>謙虚 Humility
尊敬 Respect
信頼 Trust
</code></pre><ul>
<li>あらゆる人間関係の衝突は、上記の原則の欠如に起因する。</li>
</ul>
<h2 id="天才プログラマの神話">天才プログラマの神話</h2>
<blockquote>
<p>早い段階で、高速に、何度も失敗せよ</p>
</blockquote>
<ul>
<li><strong>早い段階から成果を共有すること</strong>。一人で間違ったことをして時間を無駄にしてしまうことのリスク。</li>
</ul>
<h2 id="コミュニケーション">コミュニケーション</h2>
<ul>
<li>コミュニケーションの原則は、同期コミュニケーション（ミーティングなど）の人数を減らし、非同期コミュニケーション（メールなど）の人数を増やすこと。</li>
<li>できるだけ多くの人が、プロジェクトの文書から全ての情報を取得できることが重要</li>
</ul>
<p><strong>ミーティングを開くときの５つのルール</strong></p>
<ol>
<li>絶対に必要な人だけを呼ぶ</li>
<li>アジェンダを作ってミーティング開始前に配布する</li>
<li>ミーティングのゴールを達成したら時間前でも終了する</li>
<li>ミーティングを順調に進める</li>
<li>ミーティングの開始時間を強制的に中断される時間（お昼休みや就業時間）の前に設定する</li>
</ol>
<h2 id="モチベーション">モチベーション</h2>
<ul>
<li>モチベーションには外発的動機と内発的動機の2種類がある。</li>
<li>外発的動機は外からの力で生まれるものであり、内発的動機は自発的なものである。<strong>人を幸せで生産的にするのは外部的動機でなく、内発的動機</strong></li>
</ul>
<p><strong>内発的動機に必要な３つの要素</strong></p>
<pre><code>自律性：自分で考えて行動すること。自律性のあるエンジニアは、プロダクトの大まかな方向性を示せば、あとはどうやってそこに行くかを自分で決められる。プロダクトのオーナーシップが感じられることがモチベーションに繋がる

熟練：エンジニアが新しいスキルを学び、既存のスキルを向上させるための機会を作ること

目的：顧客からの役に立ったというフィードバックがチームのモチベーションを高める
</code></pre><h2 id="小さく約束して大きく届ける">小さく約束して、大きく届ける</h2>
<ul>
<li>GOOGLEはプロダクトの機能を事前に予告しないという、ポリシーを持っている。そのおかげで、新しい機能を公開した時に嬉しい驚きがある。</li>
<li>非現実的な期日に間にあわせるためにデスマーチをすることもない。ソフトウェアは、実際に準備されて利用できるようになってからリリースされる</li>
<li>GOOGLEのモットー：「ユーザーに集中すれば、他のことはすべてついてくる」
<ul>
<li>プロダクトは最初の体験が最も大事である。ソフトウェアを初めて使うときにどれだけ難しいと感じるかを考える</li>
<li>多くの人は論理と感情を同じくらい使う。<strong>ソフトフェアに対する感情的な知覚</strong>に配慮しなければならない</li>
</ul>
</li>
</ul>
<h2 id="忙しいときにお願いする方法">忙しいときにお願いする方法</h2>
<ul>
<li>３つの箇条書きと行動要請
<ul>
<li>問題を説明する（最大3つ）、行動要請は１つだけ</li>
</ul>
</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>米国サンフランシスコのエンジニア&amp;スタートアップのリアルな話</title>
			<link>https://yukinooz.github.io/posts/2018/20180704/</link>
			<pubDate>Wed, 04 Jul 2018 10:15:47 +0900</pubDate>
			
			<guid>https://yukinooz.github.io/posts/2018/20180704/</guid>
			<description>エンジニアがSFで働くリアルな話 家賃は高い、1roomで月３０万くらい SF住んで楽しいのは世界最先端のプロダクトが普通に使われていること サン</description>
			<content type="html"><![CDATA[<h2 id="エンジニアがsfで働くリアルな話">エンジニアがSFで働くリアルな話</h2>
<ul>
<li>家賃は高い、1roomで月３０万くらい</li>
<li>SF住んで楽しいのは世界最先端のプロダクトが普通に使われていること</li>
<li>サンフランシスコは狭い、原宿と渋谷くらいで若い人が多い</li>
<li>一方、シリコンバレーは家族持ちが多い</li>
<li>年収1200万で低収入、保険も家賃も高い、全然足りない</li>
</ul>
<h2 id="資金調達">資金調達</h2>
<ul>
<li>起業するなら日本で資金調達を、日本トップクラスでお金集めやすい国（＝起業家少なく投資家多い）</li>
<li>SFは資金調達するにもトラクション（実績、牽引力：ユーザー数、トラフィックなど）がないと話にならない</li>
<li>投資における「人をみる」などが少ない</li>
</ul>
<h2 id="英語">英語</h2>
<ul>
<li>英語、一対一出なく複数人と話す難しさ</li>
<li>サンフランシスコで英語が第一言語なのは３割くらい</li>
<li>ゆっくりでも聞いてくれる</li>
<li>英語のレベルで落とされることはない、ビザがなくて落とされる</li>
</ul>
<h2 id="どうやって働く">どうやって働く？</h2>
<ul>
<li>ビザがないと受からない</li>
<li>とにかくコネクションが必要</li>
<li>facebookに受かったけどビザ降りずにUK勤務になった人も</li>
</ul>
<h2 id="sfで働く人">SFで働く人</h2>
<ul>
<li>会社への帰属意識は日本より低い</li>
<li>みんな５時くらいに帰宅する</li>
<li>伸びる会社を探してジョブホッピングする人が多い（ストックオプションなどのため</li>
<li>「伸びている会社にいた」ということで評価される</li>
<li>日本はプロダクトを愛している人が多い </li>
</ul>
<h2 id="海外でエンジニアが働くには">海外でエンジニアが働くには</h2>
<ul>
<li>日系企業からの転勤の場合</li>
<li>給与は向こう基準？せめて家賃補助くらいは出ているのでは？</li>
<li>日本の人を現地法人に連れて行くのは従業員ビザ？色々複雑。</li>
<li>向こうに行けても永住権取れなければ、現地での転職はできない</li>
</ul>
<h2 id="エンジニアinアメリカ">エンジニアinアメリカ</h2>
<ul>
<li>Job descriptionがはっきりしている</li>
<li>React native dev など求人増えている</li>
<li>Nodejs javascriptが熱い。railsも。</li>
<li>スタートアップではgoも増えている</li>
<li>スケールみこしての言語選び</li>
</ul>
<h2 id="コネクションネットワーキング">コネクション、ネットワーキング</h2>
<ul>
<li>カンファレンス同じような人が来るから繰り返し行くことで仲良くなれる</li>
<li>カンファレンスから登壇すると渡航費、滞在費全て出してもらえたりする</li>
<li>ホームページで応募、狭き門ではあるが初回は通りやすい</li>
<li>どんなきっかけでも現地に行って友達作る</li>
<li>日本に興味ある人も意外といるためまあまあ友達できる（東南アジアは特に）</li>
<li>「Meetup」を使用</li>
<li>大きいイベントの周辺に多く小さいものがある、</li>
</ul>
<h2 id="実際働いてみて">実際働いてみて</h2>
<ul>
<li>カジュアルなもの自分のコードがより広く世界中の人に使われている経験、</li>
<li>より大きいインパクトとフィードバック</li>
<li>一次ソースに近づくほど得るものは多い</li>
<li>自分のカルチャー的な幅が広がる</li>
</ul>
<h2 id="どうやって働く-1">どうやって働く？</h2>
<ul>
<li>シンガポール３割くらい外国人、シンガポールはビザ降りやすい</li>
<li>アメリカで本当に働きたいなら年単位で計画すること（３〜５年）</li>
<li>現地に行って就活するも何も芽が出ずに帰って来ること普通にある</li>
<li>卓越した能力があるとアーティストビザがおりる　</li>
<li>エンジニア、専門家、研究者もアーティストビザ取れる、アーティストビザから中にはグリーンカードへの道に行った例も</li>
<li>アーティストビザを取るには分かりやすい実績が条件（ハッカソン優勝や書籍や給与など様々なカテゴリがある）</li>
<li>ビザには詳しくならないと話にならない</li>
<li>コネクションとアウトプット</li>
<li>H1Bをサポートしてくれる会社を選ぶ</li>
<li>H1B専門職 毎年応募するとか？</li>
</ul>
<h2 id="メモ">メモ</h2>
<p>Twitterとかでもサンフランシスコで働くエンジニアやデザイナーをフォローさせていただいているので、自分もいつか行きたいなくらいに思っていたけどもこんなに大変とは衝撃。</p>
<p><a href="https://techplay.jp/event/681586?utm_source=681586">https://techplay.jp/event/681586?utm_source=681586</a></p>
<pre><code>米国サンフランシスコのエンジニアスタートアップのリアルな話
日時：2018/7/4
会場：TECH PLAY
ハッシュタグ：#techplayjp
</code></pre>]]></content>
		</item>
		
		<item>
			<title>【まつもとゆきひろ氏　特別講演】若手エンジニアの生存戦略</title>
			<link>https://yukinooz.github.io/posts/2018/20180623/</link>
			<pubDate>Sun, 24 Jun 2018 10:15:47 +0900</pubDate>
			
			<guid>https://yukinooz.github.io/posts/2018/20180623/</guid>
			<description>まつもとゆきひろさん（Matz） 通称は英語圏では覚えてくれないから rubyを作った人 IT業界で最も影響力のある100人に日本人ひとり選ばれた</description>
			<content type="html"><![CDATA[<h2 id="まつもとゆきひろさんmatz">まつもとゆきひろさん（Matz）</h2>
<ul>
<li>通称は英語圏では覚えてくれないから</li>
<li>rubyを作った人</li>
<li>IT業界で最も影響力のある100人に日本人ひとり選ばれた</li>
<li>日本一有名なプログラマー</li>
<li>松江市名誉市民、10年に一回選ばれる、生きているのは一人だけ</li>
<li>ThinkPadを使用</li>
<li>政府IT総合戦略本部委員</li>
</ul>
<h2 id="生存戦略">生存戦略</h2>
<ul>
<li>「死なないこと」</li>
<li>エンジニアは他の職種より給料高めだが残業が常識、残業時間の自慢になったり</li>
<li>全員に当てはまる生存戦略は無い。人によって違う。</li>
<li>「この手順を踏めば誰かと同じように成功できる」はムリ</li>
<li>でも成功者から学べることはたくさんある</li>
<li>成功者の得意なこととは？ → <strong>パターン認識</strong>できる人が多い</li>
</ul>
<h2 id="パターン認識">パターン認識</h2>
<ul>
<li>状況は違っていつつも、共通するものは何かを取り出してくる能力</li>
<li>パターン認識 ≒ 抽象化、メタ化</li>
<li>毎回違うことに対してパターンを当てはめられるか</li>
<li>メタ戦略と呼んでいる</li>
</ul>
<pre><code>＋ 抽象化の強み
具体的なものほど寿命が短い
ex) アプリ解説書 ＜ アルゴリズム教科書
ex) アプリ ＜ 言語 ＜ OS
抽象度が高いほど、応用が効き、寿命が長くなる

ー 抽象化の弱み
抽象レベルあげすぎてついていけなくなった事例（ジョエル・スフォルスキー 　アーキテクチャ宇宙飛行士(マイクロソフト)）
漏れの可能性がある (例外など)
</code></pre><h2 id="ロールモデル">ロールモデル</h2>
<ul>
<li>完全には真似できないし、再現することはできない</li>
<li>バタフライエフェクト</li>
<li>人の記憶は都合はいい改変が行われる</li>
</ul>
<h2 id="まつもとさんの経歴からのパターン抽出">まつもとさんの経歴からのパターン抽出</h2>
<p><strong>鶏口牛後</strong></p>
<ul>
<li>鶏のチームの最初にいるほうが牛の列の1番後ろよりいい。</li>
<li>まつもとさんの場合新卒で入社した会社同期200人いてCS出身は６人だけだったため、ライバル少なく優遇された。</li>
<li>みんなの真似することあまりいいことおきない。</li>
</ul>
<p><strong>我慢の価値</strong></p>
<ul>
<li>日本語で「頑張って」英語では「hang in there」たえつづける？がまんして？の意味を持っている。</li>
<li>社会的圧力が蔓延しているけれど「みんながやっているから」は我慢の理由にならないし、理不尽に耐える必要はない。</li>
<li>同じ我慢でも「目的」のある我慢をするべき。  </li>
<li>労働は我慢ではないこと、また報酬は価値の対価であること。</li>
</ul>
<p><strong>プログラマー三代美徳</strong></p>
<ul>
<li>怠惰 ：全体の労力をへらすために手間を惜しまない。最も重要。</li>
<li>短期 ：コムピューターが傲慢なときに感じる怒り。</li>
<li>傲慢 ：人様に出しても恥ずかしくないプログラムを</li>
</ul>
<p><strong>ポジティブ思考</strong></p>
<ul>
<li>みんながやらないけれどやってもいいこと</li>
<li>いい意味で「空気読まない」</li>
<li>仕事に命をかける必要はない、致死量はかわらないのに鈍感になる</li>
<li>同調圧力にまけない</li>
<li>理不尽は拒否する、声をあげる</li>
<li>Don&rsquo;t work hard work smart</li>
<li>理不尽の拒否方法</li>
<li>価値観にアプローチする、上司は、無自覚に考えている</li>
<li>社会的圧力を自覚する</li>
<li>理不尽に声をあげる</li>
<li>上司とリスペクトできる関係を構築する</li>
<li>Win-Winの関係にする（本『7つの習慣』)</li>
<li>またはNoDeal</li>
<li>どちらかしか得しない取引はそもそも取引しないこと、取引しない選択肢をもつ</li>
<li>成果をあげるとだいたいの無理は通るようになる</li>
</ul>
<p><strong>メタ戦略</strong></p>
<ol>
<li>我慢に価値をおかない</li>
<li>自覚的、自発的に考える：ある判断をするときに、どうしてその判断をするのか、目的、ゴールを考える</li>
<li>自分を知る：自分にとって良い判断をするため。自分がどういう状態で、どんな環境にいるか</li>
<li>思い込みに自覚的になる：思い込みは脳内キャッシュではないか、意識的に脳内キャッシュにインバリデーションを（無効化）</li>
</ol>
<p><strong>コントロール意識</strong></p>
<ul>
<li>人を叱るとと60%の生産性下がる</li>
<li>アルファシンドローム</li>
<li>人間は逆アルファシンドローム? 世話されたり、指示されたりすると「自分は下だ」と思い込んでしまう</li>
<li>→ 自分の人生の主人公、アルファであること</li>
</ul>
<p><strong>インプットアウトプット</strong></p>
<ul>
<li>たくさんインプットして溜め込んでも差別化要因にはならない</li>
<li>アウトプット youtuber 心理的障壁 思い込みと同じ </li>
<li>クオリティはとりあえず棚</li>
<li>人芸の可塑性にかける</li>
</ul>
<h2 id="おすすめ">おすすめ</h2>
<ul>
<li>「CAREER SKILLS　ソフトウェア開発者の完全キャリアガイド」</li>
<li>「完訳7つの習慣　人格主義の回復」</li>
</ul>
<h2 id="メモ">メモ</h2>
<p><a href="https://togetter.com/li/1240029">https://togetter.com/li/1240029</a></p>
<p>想像していたよりも、エンジニアリングのみでなく「働き方」「人、社会との向き合い方」について話されていた印象。「心理」に興味を持つことは大事であること、成功者やロールモデルの方の抽象化するためにも「人」への興味を忘れてはいけないなと思った。</p>
<pre><code>【まつもとゆきひろ氏　特別講演】若手エンジニアの生存戦略
日時：2018/6/23
ゲスト：まつもとゆきひろさんさん
会場、開催：サポーターズ
ハッシュタグ：#エンジニアの生存戦略
</code></pre>]]></content>
		</item>
		
	</channel>
</rss>
