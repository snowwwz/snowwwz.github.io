<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Wouldn&#39;t It Be Nice</title>
		<link>https://yukinooz.github.io/posts/</link>
		<description>Recent content in Posts on Wouldn&#39;t It Be Nice</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>Copyright since 2020 Reona Shimada All Rights Reserved.</copyright>
		<lastBuildDate>Sun, 17 Oct 2021 11:25:47 +0900</lastBuildDate>
		<atom:link href="https://yukinooz.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>golang interfaceとは</title>
			<link>https://yukinooz.github.io/posts/2021/20211017_go_interface/</link>
			<pubDate>Sun, 17 Oct 2021 11:25:47 +0900</pubDate>
			
			<guid>https://yukinooz.github.io/posts/2021/20211017_go_interface/</guid>
			<description>Interface 中身のない型 何でも入る型 func main() { var i interface{} i = 4 fmt.Println(i) //4 i = 3.5 fmt.Println(i) //3.5 i = &amp;#34;文字列&amp;#34; fmt.Println(i) //文字列 } 型変換 // (interfaceの変数).</description>
			<content type="html"><![CDATA[<h1 id="interface">Interface</h1>
<ul>
<li>中身のない型</li>
</ul>
<h2 id="何でも入る型">何でも入る型</h2>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">i</span> <span class="kd">interface</span><span class="p">{}</span>
	
	<span class="nx">i</span> <span class="p">=</span> <span class="mi">4</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="c1">//4
</span><span class="c1"></span>	
	<span class="nx">i</span> <span class="p">=</span> <span class="mf">3.5</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="c1">//3.5
</span><span class="c1"></span>	
	<span class="nx">i</span> <span class="p">=</span> <span class="s">&#34;文字列&#34;</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="c1">//文字列
</span><span class="c1"></span><span class="p">}</span>
</code></pre></div><ul>
<li>型変換</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// (interfaceの変数).(型名)
</span><span class="c1"></span>
<span class="nx">str</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">i</span><span class="p">.(</span><span class="kt">string</span><span class="p">)</span>
<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;\n%s %T&#34;</span><span class="p">,</span> <span class="nx">str</span><span class="p">,</span> <span class="nx">str</span><span class="p">)</span> <span class="c1">// 文字列 string true
</span></code></pre></div><ul>
<li>switchで型判定できる</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">i</span> <span class="kd">interface</span><span class="p">{}</span>
	
	<span class="nx">i</span> <span class="p">=</span> <span class="mi">4</span>
	<span class="nf">printType</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
	
	<span class="nx">i</span> <span class="p">=</span> <span class="mf">3.5</span>
	<span class="nf">printType</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
	
	<span class="nx">i</span> <span class="p">=</span> <span class="s">&#34;文字列&#34;</span>
	<span class="nf">printType</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
	
	<span class="nx">i</span> <span class="p">=</span> <span class="kc">false</span>
	<span class="nf">printType</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
<span class="p">}</span>


<span class="kd">func</span> <span class="nf">printType</span><span class="p">(</span><span class="nx">i</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
	<span class="k">switch</span> <span class="nx">i</span><span class="p">.(</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">case</span> <span class="kt">int</span><span class="p">:</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;int&#34;</span><span class="p">)</span>
	<span class="k">case</span> <span class="kt">float64</span><span class="p">:</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;float64&#34;</span><span class="p">)</span>
	<span class="k">case</span> <span class="kt">string</span><span class="p">:</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;string&#34;</span><span class="p">)</span>
	<span class="k">default</span><span class="p">:</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;other&#34;</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h2 id="関数をまとめる">関数をまとめる</h2>
<ul>
<li>関数群をメソッドにもつ構造体を代入できる、クラスの役割</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">Interface</span> <span class="kd">interface</span> <span class="p">{</span>
	<span class="nf">add</span><span class="p">(</span><span class="nx">x</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">i</span> <span class="nx">Interface</span>
	<span class="nx">i</span> <span class="p">=</span> <span class="nx">struct1</span><span class="p">{</span><span class="nx">value</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
	<span class="nx">i</span> <span class="p">=</span> <span class="nx">struct2</span><span class="p">{</span><span class="nx">value</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">struct1</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">value</span> <span class="kt">int</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">struct2</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">value</span> <span class="kt">int</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">s1</span> <span class="nx">struct1</span><span class="p">)</span> <span class="nf">add</span><span class="p">(</span><span class="nx">x</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nx">s1</span><span class="p">.</span><span class="nx">value</span> <span class="o">+</span> <span class="nx">x</span>
<span class="p">}</span>
</code></pre></div><ul>
<li>addメソッドはstruct1にしか実装していないため、Interface型のiにStruct2は代入できない</li>
</ul>
<blockquote>
<p>cannot use struct2{&hellip;} (type struct2) as type Interface in assignment:
struct2 does not implement Interface (missing add method)</p>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>ロンドン大学のCS オンライン学士に入学をした</title>
			<link>https://yukinooz.github.io/posts/2021/20211016_uol_enroll/</link>
			<pubDate>Sat, 16 Oct 2021 10:16:47 +0900</pubDate>
			
			<guid>https://yukinooz.github.io/posts/2021/20211016_uol_enroll/</guid>
			<description>概要 Coursera上の学士プログラム、ロンドン大学BSc CSに2021年10月より入学した。 会社は辞めないので、パートタイムで単位取得して</description>
			<content type="html"><![CDATA[<h1 id="概要">概要</h1>
<p>Coursera上の学士プログラム、ロンドン大学BSc CSに2021年10月より入学した。
会社は辞めないので、パートタイムで単位取得していく社会人学生になった。</p>
<h1 id="背景">背景</h1>
<p>コンピューターサイエンスを学問として体系的に学びたかったのが理由。</p>
<p>文系出身でエンジニアやってきて、自分の数学や情報学の学問的な素養が根本から欠如していることを痛感することは少なからずあったこと、全くの未知な分野にキャッチアップする際も、やはり学問的バックグラウンドを持っている人と比べると理解のスピードが違ったり、いつかちゃんと学びたいなとはずっと思っていた。</p>
<p>3年目になりタイミング的にも、今腰を据えて自分の職業を学問として向き合ってみることにした。</p>
<h1 id="参考リンク">参考リンク</h1>
<ul>
<li><a href="https://london.ac.uk/courses/computer-science">公式</a></li>
<li><a href="https://www.reddit.com/r/UniversityOfLondonCS/">reddit</a></li>
<li><a href="https://discord.com/channels/609355808010010654/609355808010010657">discord</a></li>
<li><a href="coursera.org/degrees/bachelor-of-science-computer-science-london">coursera University of London</a></li>
<li><a href="https://github.com/world-class/REPL">github REPL</a></li>
</ul>
<h1 id="今後">今後</h1>
<p>高校卒業から5年経過し数学の成績が証明できず、最初の学期は2科目固定で成績上位になる必要があるみたいなので、まずは正式入学できるよう今後5ヶ月頑張る。</p>
]]></content>
		</item>
		
		<item>
			<title>golang deferの挙動</title>
			<link>https://yukinooz.github.io/posts/2021/20211015_go_defer/</link>
			<pubDate>Fri, 15 Oct 2021 11:25:47 +0900</pubDate>
			
			<guid>https://yukinooz.github.io/posts/2021/20211015_go_defer/</guid>
			<description>defer A defer statement defers the execution of a function until the surrounding function returns. The deferred call&amp;rsquo;s arguments are evaluated immediately, but the function call is not executed until the surrounding function returns. A tour of go: defer 関数が終了する際に実行すべき処理を記述できる 遅延実行される関数</description>
			<content type="html"><![CDATA[<h1 id="defer">defer</h1>
<blockquote>
<p>A defer statement defers the execution of a function until the surrounding function returns.
The deferred call&rsquo;s arguments are evaluated immediately, but the function call is not executed until the surrounding function returns.</p>
</blockquote>
<ul>
<li><a href="https://tour.golang.org/flowcontrol/12">A tour of go: defer</a></li>
<li>関数が終了する際に実行すべき処理を記述できる</li>
<li>遅延実行される関数の引数は即時評価され、実行のみ遅延される</li>
</ul>
<h3 id="用途">用途</h3>
<ul>
<li>後片付けに使われる</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;io&#34;</span>
	<span class="s">&#34;os&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="c1">// deferを使わないと途中でエラー終了した際にファイルがクローズされない
</span><span class="c1"></span>	<span class="nx">err</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
		<span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;aaa.txt&#34;</span><span class="p">)</span>
		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
			<span class="k">return</span> <span class="nx">err</span>
		<span class="p">}</span>

		<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">io</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">file</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
			<span class="k">return</span> <span class="nx">err</span>
		<span class="p">}</span>

		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">file</span><span class="p">.</span><span class="nf">Close</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
			<span class="k">return</span> <span class="nx">err</span>
		<span class="p">}</span>
		<span class="k">return</span> <span class="kc">nil</span>
	<span class="p">}()</span>

	<span class="c1">// defer使えばエラーが起きてもクローズされる
</span><span class="c1"></span>	<span class="nx">err</span> <span class="p">=</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
		<span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;aaa.txt&#34;</span><span class="p">)</span>
		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
			<span class="k">return</span> <span class="nx">err</span>
		<span class="p">}</span>
		<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
			<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">file</span><span class="p">.</span><span class="nf">Close</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
			   <span class="c1">// do something
</span><span class="c1"></span>			<span class="p">}</span>
		<span class="p">}()</span>

		<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">io</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">file</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
			<span class="k">return</span> <span class="nx">err</span>
		<span class="p">}</span>

		<span class="k">return</span> <span class="kc">nil</span>
	<span class="p">}()</span>

	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><h3 id="特徴">特徴</h3>
<ul>
<li>LIFO：後入先出法で実行される</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">defer</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;G&#34;</span><span class="p">)</span> <span class="c1">// 8
</span><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;B&#34;</span><span class="p">)</span> <span class="c1">// 1
</span><span class="c1"></span>
	<span class="nx">_</span><span class="p">,</span> <span class="nx">_</span> <span class="p">=</span> <span class="kd">func</span><span class="p">()</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;L&#34;</span><span class="p">)</span> <span class="c1">// 2
</span><span class="c1"></span>		<span class="k">defer</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;I&#34;</span><span class="p">)</span> <span class="c1">// 6
</span><span class="c1"></span>		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;O&#34;</span><span class="p">)</span> <span class="c1">// 3
</span><span class="c1"></span>		<span class="k">defer</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;G&#34;</span><span class="p">)</span> <span class="c1">// 5
</span><span class="c1"></span>
		<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;G&#34;</span><span class="p">)</span><span class="c1">// 4
</span><span class="c1"></span>	<span class="p">}()</span>

	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;N&#34;</span><span class="p">)</span> <span class="c1">// 7
</span><span class="c1"></span><span class="p">}</span>


<span class="c1">// =&gt; BLOGGING
</span></code></pre></div><ul>
<li>returnの値を変えるには名前付き戻り値を使う
<ul>
<li><a href="https://tour.golang.org/basics/7">a tour of go: Named return values</a></li>
</ul>
</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;fmt&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="c1">// 関数内で返り値の変数を定義/初期化
</span><span class="c1"></span>	<span class="nx">x</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
		<span class="nx">a</span> <span class="o">:=</span> <span class="mi">0</span>
		<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
			<span class="nx">a</span> <span class="p">=</span> <span class="mi">1</span>
		<span class="p">}()</span>

		<span class="k">return</span> <span class="nx">a</span>
	<span class="p">}()</span>

	<span class="c1">// 名前付き戻り値を指定
</span><span class="c1"></span>	<span class="nx">y</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">()</span> <span class="p">(</span><span class="nx">a</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
			<span class="nx">a</span> <span class="p">=</span> <span class="mi">1</span>
		<span class="p">}()</span>

		<span class="k">return</span> <span class="nx">a</span>
	<span class="p">}()</span>

	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;x= %d\ny= %d&#34;</span><span class="p">,</span> <span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// =&gt; x= 0
</span><span class="c1">//    y= 1
</span></code></pre></div><ul>
<li>遅延実行される関数の引数は即時評価され、実行のみ遅延される</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">x</span> <span class="o">:=</span> <span class="s">&#34;xxxxx&#34;</span>
		<span class="nx">x</span> <span class="p">=</span> <span class="s">&#34;yyyyy&#34;</span>
		<span class="k">defer</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
	<span class="p">}()</span>

	<span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">x</span> <span class="o">:=</span> <span class="s">&#34;xxxxx&#34;</span>
		<span class="k">defer</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
		<span class="nx">x</span> <span class="p">=</span> <span class="s">&#34;yyyyy&#34;</span>
	<span class="p">}()</span>
<span class="p">}</span>

<span class="c1">// =&gt; yyyyy
</span><span class="c1">//    XXXXX
</span></code></pre></div>]]></content>
		</item>
		
	</channel>
</rss>
